buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "org.sonarqube" version "2.6.2"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.sonarqube"

def getVersionName = { ->
    if (System.getenv('GIT_COMMIT') != null) {
        return System.getenv('GIT_COMMIT')
    } else if (System.getenv('BUILD_NUMBER') != null) {
        return System.getenv('BUILD_NUMBER')
    }
    return "SNAPSHOT"
}

group = 'ch.puzzle'
version = '0.0.1-' + getVersionName()
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Implementation-Timestamp': new Date().format("dd.MM.yyy HH:mm:ss"),
                'Jenkins-buildnumber': (System.getenv('BUILD_NUMBER') == null) ? "none" : System.getenv('BUILD_NUMBER'),
                'Buildjob-name': (System.getenv('JOB_NAME') == null) ? "none" : System.getenv('JOB_NAME'),
                'Buildjob-url': (System.getenv('BUILD_URL') == null) ? "none" : System.getenv('BUILD_URL'),
                'Git-repourl': (System.getenv('GIT_REPO_URL') == null) ? "none" : System.getenv('GIT_REPO_URL'),
                'Git-commit': (System.getenv('GIT_COMMIT') == null) ? "none" : System.getenv('GIT_COMMIT'),
                'Git-branch': (System.getenv('BRANCH_NAME') == null) ? "none" : System.getenv('BRANCH_NAME')

    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf:')
    compile('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.0.1.RELEASE')
    compile('org.springframework.hateoas:spring-hateoas')
    compile('org.liquibase:liquibase-core')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-hibernate5')
    compile('io.springfox:springfox-swagger2:2.8.0')
    compile('io.springfox:springfox-swagger-ui:2.8.0')
    compile('io.springfox:springfox-data-rest:2.8.0')
    compile('org.xhtmlrenderer:flying-saucer-pdf:9.1.16')
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    runtime('org.postgresql:postgresql')
    runtime('io.micrometer:micrometer-registry-prometheus')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    testCompile('com.h2database:h2')
}
